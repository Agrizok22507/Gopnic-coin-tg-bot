import telebot
import os
import json
import datetime

user = os.getlogin()
folder = "C:/Users/" + user + "/Desktop/1/Gop-Coin"
bot = telebot.TeleBot("TOKEN")
date = datetime.datetime.now()

help_text = """–ö–æ–º–∞–Ω–¥—ã –≥–æ–ø-–∫–æ–∏–Ω –±–æ—Ç–∞:
/help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
/balance - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.
/error - —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ.
/donate - –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞ –∏–≥—Ä—É.
/send "—Å—É–º–º–∞" "–Ω–∏–∫" - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–æ–ø-–∫–æ–∏–Ω —á–µ–ª–æ–≤–µ–∫—É.
/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–Ω–∞—Ç–∞.
/info - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ø-–∫–æ–∏–Ω–µ.
/ids - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ id.
/setgame - —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã."""

def history(text, iid):
    try:
        with open(folder + "/data/history.txt", 'a', encoding='utf-8') as file:
            file.write(f"\n[{datetime.datetime.now()}] | [{iid}] : {text}")
    except Exception as e:
        print(f"Error : {e}")

def is_whitelisted(user_id):
    try:
        with open(folder + "/data/white_list.json", 'r', encoding='utf-8') as file:
            data = json.load(file)
        w_list = data.get("white_list", [])
        return str(user_id) in w_list
    except (FileNotFoundError, json.JSONDecodeError):
        return False

@bot.message_handler(commands=['start'])
def start(message):
    history(message.text, message.from_user.id)
    if is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞/–ø–µ—Ä–µ–≤–æ–¥–∞/–¥–æ–Ω–∞—Ç–∞ –≥–æ–ø-–∫–æ–∏–Ω–æ–≤. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥üëã")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        print(f"New ID : {message.from_user.id}")

@bot.message_handler(commands=['help'])
def send_welcome(message):
    history(message.text, message.from_user.id)
    if is_whitelisted(message.from_user.id):
        bot.reply_to(message, help_text)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")

@bot.message_handler(commands=['balance'])
def get_balance(message):
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    
    try:
        with open(folder + "/data/balance.json", 'r', encoding='utf-8') as file:
            data = json.load(file)
        user_balance = data.get(str(message.from_user.id), 0)
        if isinstance(user_balance, (list, tuple)):
            user_balance = user_balance[0]
        bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å : {user_balance} GNC")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ : {str(e)}")

@bot.message_handler(commands=['ids'])
def send_ids(message):
    history(message.text, message.from_user.id)
    if is_whitelisted(message.from_user.id):
        ids = """–í–æ—Ç —Å–ø–∏—Å–æ–∫ id :
IDS"""
        bot.reply_to(message, ids)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")

@bot.message_handler(commands=['send'])
def send(message):
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    
    try:
        split = message.text.split()
        if len(split) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <—Å—É–º–º–∞> <ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è>")
            return
            
        try:
            gop = float(split[1])  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ float
            to = split[2]
        except (ValueError, IndexError):
            bot.reply_to(message, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send <—á–∏—Å–ª–æ> <ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è>")
            return
        
        if not is_whitelisted(to):
            bot.reply_to(message, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå, –Ω–∞–ø–∏—à–∏—Ç–µ /ids —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å id")
            return
            
        min_gop = 0.0005
        if gop < min_gop:
            bot.reply_to(message, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {min_gop} GNC (1 –∫–æ–ø–µ–π–∫–∞)")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        with open(folder + "/data/balance.json", 'r+', encoding='utf-8') as file:
            balance_data = json.load(file)
            sender_balance = balance_data.get(str(message.from_user.id), 0)
            if isinstance(sender_balance, (list, tuple)):
                sender_balance = sender_balance[0]
            else:
                sender_balance = float(sender_balance)
            
            if gop <= 0:
                bot.reply_to(message, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
                
            if sender_balance < gop:
                bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                return
                
            balance_data[str(message.from_user.id)] = round(sender_balance - gop, 4)
            receiver_balance = balance_data.get(to, 0)
            if isinstance(receiver_balance, (list, tuple)):
                receiver_balance = receiver_balance[0]
            else:
                receiver_balance = float(receiver_balance)
            balance_data[to] = round(receiver_balance + gop, 4)
            
            file.seek(0)
            json.dump(balance_data, file, indent=4, ensure_ascii=False)
            file.truncate()

        formatted_gop = "{0:.4f}".format(gop).rstrip('0').rstrip('.') if '.' in "{0:.4f}".format(gop) else "{0:.4f}".format(gop)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (sended)
        try:
            with open(folder + "/data/info.json", 'r+', encoding='utf-8') as file:
                info_data = json.load(file)
                current_sended = info_data.get("sended", 0)
                if isinstance(current_sended, (list, tuple)):
                    current_sended = current_sended[0]
                info_data["sended"] = round(float(current_sended) + gop, 4)
                
                file.seek(0)
                json.dump(info_data, file, indent=4, ensure_ascii=False)
                file.truncate()
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return
        
        bot.reply_to(message, f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {formatted_gop} GNC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to}")
        
        try:
            bot.send_message(
                to, 
                f"üîî –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {formatted_gop} GNC –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance_data[to]} GNC"
            )
        except Exception as e:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é {to}: {e}")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ : {str(e)}")
        print(f"Error in send: {e}")

@bot.message_handler(commands=['info'])
def info_command(message):
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    try:
        with open(folder + "/data/info.json", 'r', encoding='utf-8') as file:
            data = json.load(file)
        gnk = data.get("gnk", 0)
        sell = data.get("sell", 0)
        course = data.get("course", 0)
        working = data.get("working", 0)
        launch_date = data.get("data", 0)
        game = data.get("game", 0)
        sended = data.get("sended", 0)
        
        info_message = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ø-–∫–æ–∏–Ω–µ
–í –Ω–∞–ª–∏—á–∏–µ : {gnk} GNC
–ü—Ä–æ–¥–∞–Ω–Ω–æ : {sell} GNC
–¶–µ–Ω–∞ : {course} RUB
–†–∞–±–æ—Ç–∞–µ—Ç : {working}
–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ : {launch_date}
–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞ : {game}
–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≥–æ–ø-–∫–æ–∏–Ω–æ–≤ : {sended}
"""
        bot.reply_to(message, info_message)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ : {str(e)}")

@bot.message_handler(commands=['setgame'])
def setgame(message):
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    
    try:
        split = message.text.split(maxsplit=1)
        if len(split) < 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setgame <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã>")
            return
        game_name = split[1]
        with open(folder + "/data/info.json", 'r', encoding='utf-8') as file:
            data = json.load(file)
        data['game'] = game_name
        with open(folder + "/data/info.json", 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        bot.reply_to(message, f"–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {game_name}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['list'])
def list_command(message):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–æ —Å–æ list()
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    donate_list = """–°–ø–∏—Å–æ–∫ –¥–æ–Ω–∞—Ç–æ–≤ –≤ –Ω–∞—à–∏—Ö –∏–≥—Ä–∞—Ö!
/donate <–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞>

rebirth - –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ (–≤ –≥–æ–ø–Ω–∏–∫–µ/—Ç—ë—Ç–µ –∑–∏–Ω–µ)

slow - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ (–≥–æ–ø–Ω–∏–∫/—à–∏–∑–∏–∫/—Ç—ë—Ç—è –∑–∏–Ω–∞) (—Å–µ–∫—É–Ω–¥—ã)"""
    bot.reply_to(message, donate_list)

@bot.message_handler(commands=['donate'])
def donate(message):
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    try:
        split = message.text.split(maxsplit=2)  # –†–∞–∑–±–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ 3 —á–∞—Å—Ç–∏
        donat = split[1]
        sec = split[2] if len(split) > 2 else None
        
        bot.reply_to(message, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–Ω–∞—Ç '{donat}' –ø–æ–¥–∞–Ω–∞.")
        with open(folder + "/data/history.txt", "a", encoding='utf-8') as file:
            file.write(f"\n[{datetime.datetime.now()}] –ó–∞—è–≤–∫–∞ –æ—Ç {message.from_user.id} –Ω–∞ –¥–æ–Ω–∞—Ç '{donat}' (—Å–µ–∫: {sec})")
    except Exception as e:
        bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /donate <–Ω–∞–∑–≤–∞–Ω–∏–µ> [—Å–µ–∫—É–Ω–¥—ã]\n–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['error'])
def error_report(message):
    history(message.text, message.from_user.id)
    if not is_whitelisted(message.from_user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ‚ùå")
        return
    try:
        error_desc = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        bot.reply_to(message, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏–Ω—è—Ç–∞: {error_desc}")
        with open(folder + "/data/history.txt", "a", encoding='utf-8') as file:
            file.write(f"\n[{datetime.datetime.now()}] –û—à–∏–±–∫–∞ –æ—Ç {message.from_user.id}: {error_desc}")
    except Exception as e:
        bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /error <–æ–ø–∏—Å–∞–Ω–∏–µ>\n–û—à–∏–±–∫–∞: {e}")

print("Bot activated!")
bot.infinity_polling()
